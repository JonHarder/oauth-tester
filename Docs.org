* Identity Provider Service
A server which provides means of 

- Resource provider
- Authorization server
- Service provider

* Login flow
For normal use cases, when the service requesting access has a backend, the =authorization_code= flow should be used. In this flow, 

1. redirect browser to authorize endpoint
   #+BEGIN_SRC http
   HTTP/1.1 302 Found
   Location: https://idp.example.com/authorize?PARAMS
   #+END_SRC
   
   where PARAMS are the following query parameters:
   - =scope= :: a list of access scopes the client is requesting permission to gain authorization to perform on the user's behalf. Delineated by spaces, and url-encoded. For Open ID Connect, the =openid= scope MUST be included. To obtain a refresh token, the =offline_access= scope must be added.
   - =client_id= :: the name of the client application, given to the client on registration with the authorization server
   - =redirect_uri= :: the url of the client callback endpoint which the authorization server will redirect the user to after authorization. 
   - =state= :: generated by the client and sent to the authorization server. this must be checked against the value returned from the authorization server as a query parameter provided to the =redirect_url=.
   - =response_type= :: When using the ~authorization_code~ flow, this must be set to "code" (meaning the user will be redirected to your =redirect_uri= with a ~code~ query parameter that the authorization server created for you.)
2. authorization server presents user with an authorize page
3. browser is redirected to the service provider's callback url provided in (1. =redirect_uri=), adding:
   - =code= :: a one time use token which can be exchanged for an access token. Used in (4.)
   - =state= :: (from 1. =state=) these MUST match, if they do not, the authorization request must abort.
4. service provider's callback endpoint exchanges code provided in (3) for access token and id token
   
   #+BEGIN_SRC restclient
   POST /token
   Host: http://idp.example.com
   Content-Type: application/x-www-form-urlencoded

   code=...
     &client_id=...
     &grant_type=authorization_code
     &client_secret=...
     &redirect_uri=...
   #+END_SRC
   
   - =code=
   - =clent_id=
   - =client_secret=
   - =redirect_uri=
   - =grant_type=
5. The authorization server responds with the access token
   #+BEGIN_SRC json
   {
     "access_token": "z8dO1nxGhVseHbXm2FUfQrNFGynSFQCe",
     "token_type": "Bearer",
     "expires_in": 86400,
     "scope": "openid email profile",
     "id_token": "..."
   }
   #+END_SRC

   The ~id_token~ is the Open ID Connect specific part. It is a [[https://jwt.io/][jwt]], in the above example it has been truncated, but when decoded, would look something like this:

   #+BEGIN_SRC json
   {
     "aud": "Test App",
     "exp": 1648217592,
     "family_name": "Bobson",
     "given_name": "Bob",
     "iat": 1648217472,
     "iss": "idp.example.com",
     "nbf": 1648217472,
     "nonce": "ruURRP7u929vD94nCSlVpqhsqbXWX3cB",
     "sub": "bob.bobson@test.com"
   }
   #+END_SRC

The =id_token= contains basic information about the user who authorized the request as well as meta information about the token itself, like expiration time =exp= and issuer =iss=. You can use this in your application to create a user profile

From here, your =access_token= can be used to authenticate and authorize requests to the resource server on the user's behalf.

#+BEGIN_SRC restclient
GET resource.example.com/users/messages/4
Authorization: Bearer z8dO1nxGhVseHbXm2FUfQrNFGynSFQCe
#+END_SRC
   

* Known Scopes
A ~scope~ is a name of a permission specific to the resource server

In order to initiate an Open ID Connect login, the authorization request must contain at least the ~openid~ scope.

#+BEGIN_SRC restclient
GET https://idp.example.com/authorize?scope=openid
#+END_SRC
