* OAuth Client testing server
This is a testing Open ID Connect compliant identity provider server. It aims to be particularly verbose in providing feedback to developers wishing to implement SSO using Open ID Connect into their service.

** Running

#+BEGIN_SRC sh
docker compose up
#+END_SRC

This will start the server itself, but also the required database, and a database administration
dashboard hosted on http://127.0.0.1:5050.

The credentials to log in are provided in the docker-compose.yml file under *pgadmin* with the keys (~PGADMIN_DEFAULT_EMAIL~
and ~PGADMIN_DEFAULT_PASSWORD~)

Once into the dashboard, you can add a server and use the parameters set in the docker-compose.yml file user the
*db* section, namely: ~POSTGRES_USER~, and ~POSTGRES_PASSWORD~.

** Development Dependencies
- go 1.17
** Development Dependencies
- CompileDaemeon :: Used for the local dev server with automatic server rebuilding.
#+BEGIN_SRC sh
go install github.com/githubnemo/CompileDaemon@latest
#+END_SRC

** Building
#+begin_src sh
make
#+end_src

Alternatively, you can build and run the server with hot binary reloading using [[https://github.com/githubnemo/CompileDaemon][CompileDaemon]]
#+BEGIN_SRC sh
make dev
#+END_SRC

** Installing
#+BEGIN_SRC sh
make install
#+END_SRC

** Running
#+begin_src
Usage of oauth-server:
  -config string
    	Path to configuration file (default "config.json")
  -port int
    	Port to run server on (default 8001)
#+end_src

** Test suite
#+BEGIN_SRC sh
make test
#+END_SRC

** Documentation
[[file:Docs.org][link]]

** Enhancements
*** TODO refresh tokens not being persisted
*** TODO add config for which flows are accepted
*** TODO Nomad + consul for full application deployment
*** TODO [#B] Handle RS256 JWT signing alg
**** TODO need to provide jwks url
*** TODO Session management
[[https://openid.net/specs/openid-connect-session-1_0.html][openid docs]]
*** TODO Integrate a server framework
- need to do some research to find a suitable one
- fiber?
*** TODO verify =code_challenge_method= against ~settings.pkce.allowed_methods~
*** SOMEDAY Handle different =response_type= flows
*** DONE [#A] handle ~implicit~ flow
- =response_type= :: ~token~
- =response_type= :: ~id_token~
*** DONE add landing page
*** DONE add settings page
*** DONE add db
**** DONE figure out how to express =[]string= in ~gorm~
*** DONE Implement scope access test endpoint
- using auth header, determine if the requested content is allowed to access it given the scopes it was authorized for
#+BEGIN_SRC restclient
GET http://localhost:8001/scope-test?resource=foo
Authorization: Bearer as98htaiOIENas89398wtMTCCDpu7
#+END_SRC

should respond with 403 if authorize request did not contain the ~foo~ scope.
*** DONE refactor =validation= package
- move grant type specific logic into specific package =grants=
*** DONE move map objects from =types= package into separate =db= package
- anticipating eventual actual database
- makes more clear what those maps are doing
*** DONE refactor token request verification
- using =TokenRequest= interface
*** DONE handle user information endpoint
*** DONE add config block to ~config.json~
*** DONE Dockerize
